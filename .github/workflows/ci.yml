name: CI

on:
  push:
    branches: [main]
  pull_request:

jobs:
  build:
    name: Lint and Build
    runs-on: ${{ matrix.os }}
    # To use Remote Caching, uncomment the next lines and follow the steps below.
    # env:
    #  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
    #  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Setup Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Lint
        run: yarn lint

      - name: Build
        run: yarn build
        env:
          REACT_APP_SEGMENT_WRITE_KEY: ${{ secrets.REACT_APP_SEGMENT_WRITE_KEY }}
      
      - name: Zip extension
        run: |
          chmod +x "${GITHUB_WORKSPACE}/.github/zip_extension.sh"
          ${GITHUB_WORKSPACE}/.github/zip_extension.sh

      - name: Get extension package version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@main
        with:
          path: apps/extension
      
      - name: Get all releases
        run: |
          chmod +x "${GITHUB_WORKSPACE}/.github/get_releases.sh"
          ${GITHUB_WORKSPACE}/.github/get_releases.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token

      # - name: Create extension draft release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      #   with:
      #     tag_name: ${{ steps.package-version.outputs.current-version }}
      #     release_name: Draft release ${{ steps.package-version.outputs.current-version }}
      #     body: |
      #       Draft release
      #     draft: true
      #     prerelease: true
      
      # - name: Upload extension draft release asset
      #   id: upload-release-asset 
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
      #     asset_path: apps/extension/release.zip
      #     asset_name: release.zip
      #     asset_content_type: application/zip
